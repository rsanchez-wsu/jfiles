/*
 * Copyright (C) 2016 - WSU CEG3120 Students
 * 
 * Roberto C. SÃ¡nchez <roberto.sanchez@wright.edu>
 * 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package edu.wright.cs.jfiles.socketmanagement;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/**
 * This class is used to reassemble packets generated by the SocketManager
 * class.
 * 
 * @author Daryl Arouchian
 *
 */
public class PacketAssembler implements Runnable {
	
	static final Logger logger = LogManager.getLogger();
	private final int idNumber;
	// Temporarily unused
	@SuppressWarnings("unused")
	private final byte tag;
	private byte[] packet;
	private ArrayList<byte[]> packetList = null;
	private volatile int numPack = 0;
	private volatile boolean ended = false;
	private volatile File finishedFile = null;
	private Thread thrd = null;
	private boolean fileTransferred = false;
	private ReentrantReadWriteLock rwl = null;
	private Lock writeLock = null;

	/**
	 * constructs the PacketAssemble object with an assigned ID number and
	 * initial packet.
	 * 
	 * @param tag
	 *            TrafficTag byte value of the packet
	 * @param idnum
	 *            ID number associated with every packet and this object
	 * @param packet
	 *            The initial packet to begin assembly process
	 */
	public PacketAssembler(byte tag, int idnum, byte[] packet) {

		this.tag = tag;
		idNumber = idnum;
		packetList = new ArrayList<>();
		packetList.ensureCapacity(++numPack);
		packetList.add(packet);
		rwl = new ReentrantReadWriteLock();
		writeLock = rwl.writeLock();
		thrd = new Thread(this);
		thrd.setName("PacketAssembler#" + idNumber);
		thrd.start();
	}

	@Override
	public void run() {
		String tempName = "" + idNumber + "";
		File tempFile = null;
		FileOutputStream fos = null;
		try {
			tempFile = File.createTempFile(tempName, null);
			fos = new FileOutputStream(tempFile);
		} catch (FileNotFoundException e) {
			logger.error("Temp File not found", e);
		} catch (IOException e) {
			logger.error("TempFile creation failed", e);
		}
		while (!ended || !packetList.isEmpty()) {
			if (exchangePacket()) {
				try {
					fos.write(packet);
					fos.flush();
				} catch (IOException e) {
					logger.error("Failed to write a packet to file", e);
				}
				packet = null;
			}
		}
		try {
			if (fos != null) {
				fos.close();
			}
		} catch (IOException e) {
			logger.error("Failed to close output stream for" + tempName + ".tmp", e);
		}
		finishedFile = tempFile;
		notifyDone();
	}

	/**
	 * Returns the ID number associated with this instance.
	 * 
	 * @return ID number
	 */
	public int getId() {
		return idNumber;
	}

	/**
	 * Ends the packet assembly process and finalizes file.
	 * 
	 */
	public synchronized void end() {
		ended = true;
		notifyAll();
	}

	/**
	 * Checks the status of this packet assembler.
	 * 
	 * @return true if the packet assembler is finished creating the File
	 */
	public boolean isDone() {
		boolean done = false;

		if (!thrd.isAlive() && fileTransferred) {
			done = true;
		}
		return done;
	}
	
	/**
	 * This method is used by the Socket Manager to 
	 * add a packet to the Packet Assembler object. 
	 * This will also perform a notifyAll() call to 
	 * wake the Packet Assembler if it became dormant.
	 * 
	 * @param packet The packet to be added to the 
	 * 				packet assembler build order
	 */
	public synchronized void addPacket(byte[] packet) {
		try {
			writeLock.lock();
			packetList.ensureCapacity(++numPack);
			packetList.add(packet);
			if (packetList.size() == 1) {
				notifyAll();
			}
		} finally {
			writeLock.unlock();
		}
	}

	/**
	 * Exchanges the packet being processed by the packet assembler.
	 * 
	 */
	private synchronized boolean exchangePacket() {
		boolean success = false;
		if (packetList.isEmpty()) {
			while (packetList.isEmpty()) {
				try {
					wait();
				} catch (InterruptedException e) {
					logger.catching(e);
				}
			}
			success = false;
		} else {
			try {
				writeLock.lock();
				packet = packetList.get(0);
				packetList.remove(0);
				packetList.ensureCapacity(--numPack);
				success = true;
			} finally {
				writeLock.unlock();
			}
		}
		return success;
	}
	
	/**
	 * Notifies any waiting threads that the 
	 * file is ready to be transferred.
	 */
	private synchronized void notifyDone() {
		notifyAll();
	}

	/**
	 * Returns the finished file or null if the file is not finished.
	 * 
	 * @return the file or null if not finished
	 */
	public File getFile() {
		if (finishedFile != null) {
			fileTransferred = true;
		}
		return finishedFile;
	}

}
